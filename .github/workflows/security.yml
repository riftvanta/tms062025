name: 🔒 Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit --json > npm-audit-results.json
        continue-on-error: true

      - name: 📊 Upload npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit-results.json
          retention-days: 7

      - name: 🔒 Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=package.json

      - name: 📈 Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  sast-scan:
    name: 🔬 Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔬 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Build Docker image
        run: |
          docker build -t tms-security-scan:latest .
        continue-on-error: true

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tms-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📈 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    name: 📄 License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 📄 Install license checker
        run: npm install -g license-checker

      - name: 🔍 Check licenses
        run: |
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0' --excludePrivatePackages
          license-checker --json > license-report.json

      - name: 📊 Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  security-headers:
    name: 🛡️ Security Headers Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🌐 Start application
        run: npm start &
        env:
          PORT: 3000

      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:3000

      - name: 🛡️ Check security headers
        run: |
          curl -I http://localhost:3000 | grep -E "(X-Frame-Options|X-Content-Type-Options|X-XSS-Protection|Strict-Transport-Security|Content-Security-Policy)"
          npm run test:security-headers
        continue-on-error: true

  notification:
    name: 📢 Security Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [dependency-scan, secret-scan, sast-scan, license-check, security-headers]

    steps:
      - name: 📢 Security scan summary
        run: |
          echo "🔒 Security Scan Results:"
          echo "Dependencies: ${{ needs.dependency-scan.result }}"
          echo "Secrets: ${{ needs.secret-scan.result }}"
          echo "SAST: ${{ needs.sast-scan.result }}"
          echo "License: ${{ needs.license-check.result }}"
          echo "Headers: ${{ needs.security-headers.result }}"

      - name: 🚨 Notify on critical security issues
        if: ${{ needs.secret-scan.result == 'failure' || needs.sast-scan.result == 'failure' }}
        run: |
          echo "🚨 CRITICAL SECURITY ISSUES DETECTED!"
          echo "Please review the security scan results immediately."
          exit 1 